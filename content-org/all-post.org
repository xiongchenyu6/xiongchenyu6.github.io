#+hugo_base_dir: ../
#+hugo_section: posts

#+seq_todo: TODO DRAFT DONE
#+seq_todo: TEST__TODO | TEST__DONE

#+property: header-args :eval never-export

#+startup: indent

#+macro: doc [[https://ox-hugo.scripter.co/doc/$1][$2]]
#+macro: oxhugoissue =ox-hugo= Issue #[[https://github.com/kaushalmodi/ox-hugo/issues/$1][$1]]
#+macro: hugoissue =hugo= Issue #[[https://github.com/gohugoio/hugo/issues/$1][$1]]
#+macro: hugopr =hugo= PR #[[https://github.com/gohugoio/hugo/pull/$1][$1]]
#+macro: bfissue /Blackfriday/ Issue #[[https://github.com/russross/blackfriday/issues/$1][$1]]
#+macro: commit commit [[https://github.com/kaushalmodi/ox-hugo/commit/$1][$1]]
#+hugo_categories.
# https://scripter.co/latex-in-html/
#+macro: latex @@html:<span class="latex">L<sup>a</sup>T<sub>e</sub>X</span>@@
#+macro: youtube @@html:<div class="org-youtube"><iframe src="https://www.youtube-nocookie.com/embed/$1" allowfullscreen title="YouTube Video"></iframe></div>@@

#+author:
#+hugo_custom_front_matter: :author "Xiong ChenYu"
* Nix flake for devops
:PROPERTIES:
:EXPORT_FILE_NAME: nffd
:EXPORT_DATE: <2021-11-23 Tue>
:END:
** develop shell
** build stage
** test stage
** CI/CD
** publish stage
** infra as code
** deploy

* OOP 和 FP 在架构弹性的比较-2 :scala:@fp:
:PROPERTIES:
:EXPORT_FILE_NAME: fp_vs_oop_2
:EXPORT_DATE: <2021-11-23 Tue>
:END:

承接上文结论，简单 OOP 范式下数据结构的扩展成本比较低下，而 FP 范式下算子的扩展成本
比较低下，在解决代码复杂度上是没有,好哒方法，但是代码组织结构上还是有优化的空间。
这 2 种范式都有自己的方法来解决双向扩展所带来的代码分散问题。

** OOP(Visitor Pattern)
是时候操起设计模式大法了，23 种扫了一眼，访问者模式看起来在这儿挺能打的。那么撸起
袖子改起来，首先我们来看上回的代码。
#+BEGIN_SRC  scala

trait Expr {
   def eval: Double
   def prettyPrint: String
}

case class Number(value: Double) extends Expr {
  override def eval = value
  override def print = value.toString
}

case class Add(a: Expr, b: Expr) extends Expr {
  override def eval = a.eval + b.eval
  override def print = s”(${a.print} + ${b.print})”
}

case class Neg(a: Expr) extends Expr {
  override def eval = — a.eval
  override def print = s”-${a.print}”
}
#+END_SRC

核心就是把数据
#+BEGIN_SRC  scala

trait Expr {
   def accept(visitor: IExpresstionEvalutaion): Double = visitor.visit(this)
   def accept(visitor: IExpresstionPrettyPrint): Void = visitor.visit(this)
}

case class Number(value: Double) extends Expr
case class Add(a: Expr, b: Expr) extends Expr
case class Neg(a: Expr) extends Expr

object IExpresstionEvalutaion {
   def visit( number : Number) = number.value;
   def visit( number : Add) =  eval(number.a) + eval(number.b)
   def visit( number : Nug) =  eval(number.a)
}
object IExpresstionPrettyPrint {
   def visit( number : Number) = number.toString;
   def visit( number : Add) = s"${visit(number.a)} + ${visit(number.b)}"
   def visit( number : Nug) =  s"-${(number.a)}""
}
#+END_SRC

之后无论扩展数据结构还是算子都收敛在一个文件内

** FP(type class)
这是朴素的 fp

#+BEGIN_SRC scala
trait Expr
case class Number(value: Double) extends Expr
case class Add(a: Expr, b: Expr) extends Expr
case class Neg(a: Expr) extends Expr

def evaluate(expression: Expr): Double = expression match {
  case Number(a) => a
  case Add(a, b) => evaluate(a) + evaluate(b)
  case Neg(a) => — evaluate(a)
}

def print(expression: Expr): String = expression match {
  case Number(a) => a.toString
  case Add(a, b) => s”(${print(a)} + ${print(b)})”
  case Neg(a) => s”-${print(a)}”
}

#+END_SRC

typeclass 是一种 ad-hot polymorphism 技术，可以对任意类型进行方法的扩张，源自于
Haskell，在 scala 中可以利用隐式转换实现。

#+BEGIN_SRC scala
@typeclass trait Eval[A] {
   def eval(a : A): Double
}
@typeclass trait PrettyPrint[A]{
  def prettyPrint(a : A): String
}

trait Expr
case class Number(value: Double) extends Expr
case class Add(a: Expr, b: Expr) extends Expr
case class Neg(a: Expr) extends Expr

implicit val EvalNumberInstance = new Eval[Number]{
  override def eval(a : Number) = a.value
}
implicit val EvalAddInstance = new Eval[Add]{
  override def eval(x : Add) = x.a.eval + x.b.eval
}
implicit val EvalNegInstance = new Eval[Neg]{
  override def eval(x : Number) = - e.eval
}
implicit val PrettyPrintNumberInstance = new PrettyPrint[Number]{
  override def prettyprint(a : Number) = a.toString
}
implicit val PrettyPrintAddInstance = new PrettyPrint[Add]{
  override def prettyprint(x : Add) = s"${x.a.prettyprint} + ${x.b.prettyprint}"
}
implicit val PrettyPrintNegInstance = new PrettyPrint[Neg]{
  override def prettyprint(x : Number) = s"- ${e.prettyprint}"
}


#+END_SRC

* OOP 和 FP 在架构弹性的比较-1 :scala:@fp:
:PROPERTIES:
:EXPORT_FILE_NAME: fp_vs_oop_1
:EXPORT_DATE: <2021-11-22 Tue>
:END:

对于一个互联网公司的程序，代码的范式是很重要的，好的范式可以让你面对产品经理的指
示的时候痛苦感会降低， 这个时候架构就非常重要了。那么我将以 scala 为例，支持多范式
的语言不多，scala 是各种范式都能 hold 比较好的。展示一下 FP 和 OOP 的优缺点。

我们对架构先提出几点要求
1. 拓展起来不会影响现有代码的清晰度
2. 拓展起来的改动比较少
3. 代码简单易测

假如有一天产品告诉你，来我们搞个计算器吧。第一期要实现加法和减法。那么你考虑的就
是这个:
#+BEGIN_QUOTE
(2 +3 ) + 4
#+END_QUOTE

用 scala 程序表示起来, 就是要求值下面这个东西。
#+BEGIN_SRC scala
val expression = Add(Add(Number(2), Number(3)), Number(4))
#+END_SRC
** Round One
*** OOP
 首先来了一个 OOP 程序员,拿起 IDE，三军未动粮草先行, 先来个接口爽一下。
 #+BEGIN_SRC scala
    trait Expr {
    def eval: Double
    }

 #+END_SRC
 emm，不错，之后在快速继承一遍

 #+BEGIN_SRC scala

case class Number(value: Double) extends Expr {
  override def eval = value
}

case class Add(a: Expr, b: Expr) extends Expr {
  override def eval = a.eval + b.eval
}

 #+END_SRC

 下面是见证奇迹的时刻

 #+BEGIN_SRC scala
  expression.eval //res0: Double = 9.0

 #+END_SRC

完美!
*** FP
接着来了一个 FP 程序员，嘴里念叨着 Functional core imperative shell, 首先把数据结构
和计算拆开来了

#+BEGIN_SRC scala

trait Expr
case class Number(value: Double) extends Expr
case class Add(a: Expr, b: Expr) extends Expr

#+END_SRC

emm，纯数据结构清爽

#+BEGIN_SRC scala
def evaluate(expression: Expr): Double = expression match {

  case Number(a) => a
  case Add(a, b) => evaluate(a) + evaluate(b)
}
#+END_SRC

emm, 纯计算，清爽

下面是见证奇迹的时刻

 #+BEGIN_SRC scala
  evaluate(expression) //res0: Double = 9.0
 #+END_SRC

完美!

** Round 2
这个时候产品说了，这个计算器有点丑啊，能不能打印好看点
*** OOP
OOP 程序员熟练的修改了接口（改动+1）
 #+BEGIN_SRC scala
    trait Expr {
    def eval: Double
    def prettyPrint: String
    }

 #+END_SRC

 然后（改动+1 + 1） =  3 处
 #+BEGIN_SRC scala

case class Number(value: Double) extends Expr {
  override def eval = value
  override def print = value.toString
}

case class Add(a: Expr, b: Expr) extends Expr {
  override def eval = a.eval + b.eval
  override def print = s”(${a.print} + ${b.print})”
}

 #+END_SRC
*** FP

这就是加个方法的事儿（改动 +1) = 1 处
#+BEGIN_SRC scala

def print(expression: Expr): String = expression match {
  case Number(a) => a.toString
  case Add(a, b) => s”(${print(a)} + ${print(b)})”
}

#+END_SRC

** Round 3
产品又说了，只有加法不够呀，我们还需要个减法
*** OOP
就是再实现一次接口呗（改动 +1)
#+BEGIN_SRC scala
case class Neg(a: Expr) extends Expr {
  override def eval = — a.eval
  override def print = s”-${a.print}”
}

#+END_SRC
*** FP

首先要拓展一个数据结构
#+BEGIN_SRC scala
case class Neg(a: Expr) extends Expr

#+END_SRC
 然后所有的函数都要随之改动

 #+BEGIN_SRC scala

def evaluate(expression: Expr): Double = expression match {
  case Number(a) => a
  case Add(a, b) => evaluate(a) + evaluate(b)
  case Neg(a) => — evaluate(a)
}

def print(expression: Expr): String = expression match {
  case Number(a) => a.toString
  case Add(a, b) => s”(${print(a)} + ${print(b)})”
  case Neg(a) => s”-${print(a)}”
}

 #+END_SRC
** 结论
没有银弹，OOP 范式下数据结构的扩展成本比较低，FP 范式下算子的扩展成本比较低。



* Preparation
:PROPERTIES:
:EXPORT_FILE_NAME: prep
:EXPORT_DATE: 2017-07-12T17:05:38-04:00
:END:
1. Be the root directory for this Hugo site (the directory containing
   =config.toml=).
   test
2. Run
  #+begin_example
  hugo server --port 1111
  #+end_example
3. See the site served on "http://localhost:1111/".

* Post 3
:PROPERTIES:
:EXPORT_FILE_NAME: post-3
:EXPORT_DATE: 2017-07-12T17:31:56-04:00
:END:
LaTeX formatted equation: \( E = -J \sum_{i=1}^N s_i s_{i+1} \)
If $a^2=b$ and \( b=2 \), then the solution must be either
$$ a=+\sqrt{2} $$ or \[ a=-\sqrt{2} \]

{{{oxhugoissue(130)}}}

\begin{equation}
\label{eq:1}
C = W\log_{2} (1+\mathrm{SNR})
\end{equation}

*Here we refer to equation \ref{eq:2}.*

* Post 4
:PROPERTIES:
:EXPORT_FILE_NAME: post-4
:EXPORT_HUGO_RESOURCES: :src "featured-image.jpg" :name "featured-image"
:EXPORT_DATE: 2017-07-12T17:31:56-04:00
:END:
Export this *first* post only by bringing point here and doing =M-x org-hugo-export-wim-to-md=.
dsaf
{{< youtube w7Ft2ymGmfc >}}

* Image / Figure                                                      :image:
** Image links :@image:
:PROPERTIES:
:EXPORT_FILE_NAME: index
:EXPORT_HUGO_RESOURCES: :src "featured-image.jpg" :name "featured-image"
:EXPORT_HUGO_BUNDLE: image
:EXPORT_DATE: 2017-07-15T07:49:44-04:00
:END:

#+begin_details
Here are the /details/.
#+end_details

#+attr_html: :open t
#+html: <style>details summary { color: green; }</style>
#+html: <style>details .details { color: blue; }</style>
#+begin_details
#+begin_summary
Some Summary
#+end_summary
Here are the /details/.
test
#+end_details

* Footnotes
* COMMENT Local Variables                                   :ARCHIVE:
# Local Variables:
# eval: (org-hugo-auto-export-mode)
# End:
