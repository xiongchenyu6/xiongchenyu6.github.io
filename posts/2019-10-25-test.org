---
title: Test
author: Xiongchenyu
---
* FP vs OOp

对于一个互联网公司的程序，代码的范式是很重要的，好的范式可以让你面对产品经理的指
示的时候痛苦感会降低， 这个时候架构就非常重要了。那么我将以scala为例，支持多范式
的语言不多，scala是各种范式都能hold比较好的。展示一下FP和OOP的优缺点。

我们对架构先提出几点要求
1. 拓展起来不会影响现有代码的清晰度
2. 拓展起来的改动比较少
3. 代码简单易测

假如有一天产品告诉你，来我们搞个计算器吧。第一期要实现加法和减法。那么你考虑的就
是这个
#+BEGIN_QUOTE
(2 +3 ) + 4
#+END_QUOTE

用scala程序表示起来, 就是要求值下面这个东西。
#+BEGIN_SRC scala
val expression = Add(Add(Number(2), Number(3)), Number(4))
#+END_SRC
** Round One
*** OOP
 首先来了一个OOP程序员,拿起IDE，三军未动粮草先行, 先来个接口爽一下。
 #+BEGIN_SRC scala
    trait Expr {
    def eval: Double
    }

 #+END_SRC
 emm，不错，之后在快速继承一遍

 #+BEGIN_SRC scala

case class Number(value: Double) extends Expr {
  override def eval = value
}

case class Add(a: Expr, b: Expr) extends Expr {
  override def eval = a.eval + b.eval
}

 #+END_SRC

 下面是见证奇迹的时刻

 #+BEGIN_SRC scala
  expression.eval //res0: Double = 9.0

 #+END_SRC

完美!
*** FP
接着来了一个FP程序员，嘴里念叨着Functional core imperative shell, 首先把数据结构
和计算拆开来了

#+BEGIN_SRC scala

trait Expr
case class Number(value: Double) extends Expr
case class Add(a: Expr, b: Expr) extends Expr

#+END_SRC

emm，纯数据结构清爽

#+BEGIN_SRC scala
def evaluate(expression: Expr): Double = expression match {

  case Number(a) => a
  case Add(a, b) => evaluate(a) + evaluate(b)
}
#+END_SRC

emm, 纯计算，清爽

下面是见证奇迹的时刻

 #+BEGIN_SRC scala
  evaluate(expression) //res0: Double = 9.0
 #+END_SRC

完美!

** Round 2
这个时候产品说了，这个计算器有点丑啊，能不能打印好看点
*** OOP
OOP 程序员熟练的修改了接口（改动+1）
 #+BEGIN_SRC scala
    trait Expr {
    def eval: Double
    def prettyPrint: String
    }

 #+END_SRC

 然后（改动+1 + 1） =  3处
 #+BEGIN_SRC scala

case class Number(value: Double) extends Expr {
  override def eval = value
  override def print = value.toString
}

case class Add(a: Expr, b: Expr) extends Expr {
  override def eval = a.eval + b.eval
  override def print = s”(${a.print} + ${b.print})”
}

 #+END_SRC
*** FP

这就是加个方法的事儿（改动 +1) = 1处
#+BEGIN_SRC scala

def print(expression: Expr): String = expression match {
  case Number(a) => a.toString
  case Add(a, b) => s”(${print(a)} + ${print(b)})”
}

#+END_SRC

** Round 3
产品又说了，只有加法不够呀，我们还需要个减法
*** OOP
就是再实现一次接口呗（改动 +1)
#+BEGIN_SRC scala
case class Neg(a: Expr) extends Expr {
  override def eval = — a.eval
  override def print = s”-${a.print}”
}

#+END_SRC
*** FP

首先要拓展一个数据结构
#+BEGIN_SRC scala
case class Neg(a: Expr) extends Expr

#+END_SRC
 然后所有的函数都要随之改动

 #+BEGIN_SRC scala

def evaluate(expression: Expr): Double = expression match {
  case Number(a) => a
  case Add(a, b) => evaluate(a) + evaluate(b)
  case Neg(a) => — evaluate(a)
}

def print(expression: Expr): String = expression match {
  case Number(a) => a.toString
  case Add(a, b) => s”(${print(a)} + ${print(b)})”
  case Neg(a) => s”-${print(a)}”
}

 #+END_SRC

* 结论

没有银弹，OOP范式下数据结构的扩展成本比较低，FP范式下算子的扩展成本比较低。
